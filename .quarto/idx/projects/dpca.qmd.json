{"title":"Demixed Principal Component Analysis (dPCA) in R","markdown":{"yaml":{"title":"Demixed Principal Component Analysis (dPCA) in R","description":"An R package and case study for demixing neural population activity.","page-layout":"full","freeze":true,"format":{"html":{"toc":true}}},"headingText":"Overview","containsRefs":false,"markdown":"\n\n\n**Demixed Principal Component Analysis (dPCA)** extends classical PCA by *separating* (demixing) the variance in neural population activity that is attributable to different task parameters—typically time, stimulus and decision—while still preserving maximal variance overall. \nOur team implemented dPCA in R and released it as the **`demixpca`** package.\n\n## Motivation\n\nNeurons in higher cortical areas often show *mixed selectivity*: a single neuron may respond to multiple sensory and motor variables, obscuring the underlying computation.  \ndPCA addresses this by projecting population responses onto low-dimensional axes that are *aligned* with individual task factors, facilitating interpretation and visualization.\n\n## Methodology\n\n### 1&nbsp;Marginalization\n\nFor each neuron we decompose its trial-averaged firing matrix $X_{t s d k}$ into marginal means (overall, time-only, stimulus-only, decision-only, and their interactions) and a residual term. Summing these marginalizations reconstructs the original data.\n\n### 2&nbsp;Loss Function\n\ndPCA seeks encoder/decoder pairs $(P_\\phi, F_\\phi)$ for every marginalization $\\phi$ by minimizing\n\n$L_{\\phi} \\;=\\; \\left\\|X_{\\phi} - P_{\\phi}F_{\\phi}X\\right\\|_{F}^{2}\n          \\;+\\; \\lambda\\,\\left\\|P_{\\phi}F_{\\phi}\\right\\|_{F}^{2}$\n\nwhere $\\lambda$ is a ridge penalty to reduce over-fitting.\n\n### 3&nbsp;Reduced-Rank Regression Solver\n\ndPCA fits each marginal matrix $X_\\phi$ by solving  \n\n$min_{P_\\phi,F_\\phi}\\;\\|X_\\phi - P_\\phi F_\\phi X\\|_F^{2}\n\\;+\\;\n\\lambda\\,\\|P_\\phi F_\\phi\\|_F^{2}$\n\nwhich is a **Reduced-Rank Regression (RRR)** problem.  \nThe package implements three low-rank solvers, each with different speed/accuracy trade-offs:\n\n| Solver | Core idea   | Speed & Scalability | Accuracy & Stability | Typical use-case |\n|--------|-------------|--------------------|----------------------|------------------|\n| **Randomized SVD (RSVD)** | Approximate SVD via random projections; computes only the leading *q* singular vectors | **Fastest** for large matrices (e.g. 3.76 s vs 6.97 s for a $2{\\times}100{\\times}3{\\times}800$ example)| Slightly lower precision for very high rank; repeat with multiple sketches to average out noise | Exploratory work on *big* data where small errors are acceptable |\n| **Full SVD** | Exact singular value decomposition | Medium; 2–3 times slower than RSVD on large matrices | **Highest accuracy**; deterministic | When numeric precision is critical or results feed into further quantitative analysis |\n| **Economy QR → SVD** | QR factorization first, then SVD on the R factor | Highly sensitive to **column count**: very slow when $D\\!\\times\\!T\\!\\times\\!S$ is large (54 s vs 3–4 s in a $4{\\times}500{\\times}6{\\times}100$ test) | Very stable for “tall-and-skinny” matrices | Datasets with *many neurons but few task conditions* (rows ≫ columns) |\n\n**Practical guidelines**\n\n* **Need for speed?**  Large *N* or $D\\!\\times\\!T\\!\\times\\!S$ → choose **RSVD**.  \n* **Need for precision?**  High effective rank or downstream quantitative use → choose **SVD**.  \n* **Tall-and-skinny?**  Few task variables, many neurons → choose **QR**.\n\n**Implementation highlights** \n\n1. Compute the ridge-regularised matrix  \n\n   $A_{\\text{RR}} \\;=\\; X_\\phi X^\\top\n   \\bigl(X X^\\top + \\lambda I\\bigr)^{-1}$\n\n2. Apply RSVD / SVD / QR to obtain a **rank-q** approximation of $A_{\\text{RR}}$.  \n3. Factor $A_{\\text{RR}}\\approx P_\\phi F_\\phi$:  \n   * Encoder $P_\\phi =$ left singular vectors  \n   * Decoder $F_\\phi =$ singular values × right singular vectors $^\\top$\n\nSelect the solver via the `method =` argument in `dpca()`:\n\n```r\ndpca(X, margins = c(\"decision\", \"time\", \"stimulus\"),\n     n_comp = c(3, 3, 3),\n     method = \"rsvd\")  # or \"svd\", \"qr\"\n```\n\n## Implementation\n\n### Installation\n\n```r\n# install devtools first if needed\ninstall.packages(\"devtools\")\n\n# install the development version of demixpca\ndevtools::install_github(\"jhgoblue/demixpca\")\n```","srcMarkdownNoYaml":"\n\n## Overview\n\n**Demixed Principal Component Analysis (dPCA)** extends classical PCA by *separating* (demixing) the variance in neural population activity that is attributable to different task parameters—typically time, stimulus and decision—while still preserving maximal variance overall. \nOur team implemented dPCA in R and released it as the **`demixpca`** package.\n\n## Motivation\n\nNeurons in higher cortical areas often show *mixed selectivity*: a single neuron may respond to multiple sensory and motor variables, obscuring the underlying computation.  \ndPCA addresses this by projecting population responses onto low-dimensional axes that are *aligned* with individual task factors, facilitating interpretation and visualization.\n\n## Methodology\n\n### 1&nbsp;Marginalization\n\nFor each neuron we decompose its trial-averaged firing matrix $X_{t s d k}$ into marginal means (overall, time-only, stimulus-only, decision-only, and their interactions) and a residual term. Summing these marginalizations reconstructs the original data.\n\n### 2&nbsp;Loss Function\n\ndPCA seeks encoder/decoder pairs $(P_\\phi, F_\\phi)$ for every marginalization $\\phi$ by minimizing\n\n$L_{\\phi} \\;=\\; \\left\\|X_{\\phi} - P_{\\phi}F_{\\phi}X\\right\\|_{F}^{2}\n          \\;+\\; \\lambda\\,\\left\\|P_{\\phi}F_{\\phi}\\right\\|_{F}^{2}$\n\nwhere $\\lambda$ is a ridge penalty to reduce over-fitting.\n\n### 3&nbsp;Reduced-Rank Regression Solver\n\ndPCA fits each marginal matrix $X_\\phi$ by solving  \n\n$min_{P_\\phi,F_\\phi}\\;\\|X_\\phi - P_\\phi F_\\phi X\\|_F^{2}\n\\;+\\;\n\\lambda\\,\\|P_\\phi F_\\phi\\|_F^{2}$\n\nwhich is a **Reduced-Rank Regression (RRR)** problem.  \nThe package implements three low-rank solvers, each with different speed/accuracy trade-offs:\n\n| Solver | Core idea   | Speed & Scalability | Accuracy & Stability | Typical use-case |\n|--------|-------------|--------------------|----------------------|------------------|\n| **Randomized SVD (RSVD)** | Approximate SVD via random projections; computes only the leading *q* singular vectors | **Fastest** for large matrices (e.g. 3.76 s vs 6.97 s for a $2{\\times}100{\\times}3{\\times}800$ example)| Slightly lower precision for very high rank; repeat with multiple sketches to average out noise | Exploratory work on *big* data where small errors are acceptable |\n| **Full SVD** | Exact singular value decomposition | Medium; 2–3 times slower than RSVD on large matrices | **Highest accuracy**; deterministic | When numeric precision is critical or results feed into further quantitative analysis |\n| **Economy QR → SVD** | QR factorization first, then SVD on the R factor | Highly sensitive to **column count**: very slow when $D\\!\\times\\!T\\!\\times\\!S$ is large (54 s vs 3–4 s in a $4{\\times}500{\\times}6{\\times}100$ test) | Very stable for “tall-and-skinny” matrices | Datasets with *many neurons but few task conditions* (rows ≫ columns) |\n\n**Practical guidelines**\n\n* **Need for speed?**  Large *N* or $D\\!\\times\\!T\\!\\times\\!S$ → choose **RSVD**.  \n* **Need for precision?**  High effective rank or downstream quantitative use → choose **SVD**.  \n* **Tall-and-skinny?**  Few task variables, many neurons → choose **QR**.\n\n**Implementation highlights** \n\n1. Compute the ridge-regularised matrix  \n\n   $A_{\\text{RR}} \\;=\\; X_\\phi X^\\top\n   \\bigl(X X^\\top + \\lambda I\\bigr)^{-1}$\n\n2. Apply RSVD / SVD / QR to obtain a **rank-q** approximation of $A_{\\text{RR}}$.  \n3. Factor $A_{\\text{RR}}\\approx P_\\phi F_\\phi$:  \n   * Encoder $P_\\phi =$ left singular vectors  \n   * Decoder $F_\\phi =$ singular values × right singular vectors $^\\top$\n\nSelect the solver via the `method =` argument in `dpca()`:\n\n```r\ndpca(X, margins = c(\"decision\", \"time\", \"stimulus\"),\n     n_comp = c(3, 3, 3),\n     method = \"rsvd\")  # or \"svd\", \"qr\"\n```\n\n## Implementation\n\n### Installation\n\n```r\n# install devtools first if needed\ninstall.packages(\"devtools\")\n\n# install the development version of demixpca\ndevtools::install_github(\"jhgoblue/demixpca\")\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"highlight-style":"github","output-file":"dpca.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":"cosmo","title":"Demixed Principal Component Analysis (dPCA) in R","description":"An R package and case study for demixing neural population activity.","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}