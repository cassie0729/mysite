{"title":"Music Genre Classification via Machine Learning","markdown":{"yaml":{"title":"Music Genre Classification via Machine Learning","description":"Rock, Instrumental & Hip Hop prediction with KNN, Random Forest and AdaBoost","format":{"html":{"toc":true,"number-sections":true,"code-fold":true,"page-layout":"full"}}},"headingText":"Motivation","containsRefs":false,"markdown":"\n\n\nStreaming platforms publish tens of thousands of tracks daily, blurring genre boundaries and stretching human taggers thin. An automatic classifier that reliably separates **Rock, Instrumental and Hip Hop** can cut curation time and power downstream recommendation engines.:contentReference[oaicite:0]{index=0}\n\n## Data\n\n* **Source** – Kaggle “Music Genre Classification” (Machine Hack Hackathon).  \n* **Observations** – 17999 tracks, already split 80 / 20 into train/test.  \n* **Predictors** – 16 audio-level features (e.g., *danceability*, *energy*, *loudness*, *tempo*, *duration_ms*) plus artist & track names.  \n* **Target** – 11 original genres (0–10). We subset to classes 10 (Rock), 7 (Instrumental) and 5 (Hip Hop) for their distinct audio signatures and sample sizes (3374, 517 and 464 tracks respectively).\n\nAfter dropping rows with missing *instrumentalness*, *key* or *popularity*, the working dataset contains **4355** observations.\n\n### Exploratory analysis (EDA)\n\n* Distributions vary widely: *energy* and *loudness* are left-skewed; *acousticness* and *instrumentalness* are heavily right-skewed.  \n* Rock dominates the sample (≈ 78 %), producing a **class-imbalance risk**.  \n* Correlation heat-map highlights a strong positive link between *energy* and *loudness* and a negative link between each and *acousticness*. \n* PCA confirms Instrumental music is separated mostly along PC1 (low energy, high acousticness), whereas Rock and Hip Hop overlap along intensity but differ along danceability/valence (PC2).\n\n## Methods\n\n| Model | Key settings | Rationale |\n|-------|--------------|-----------|\n| **K-Nearest Neighbours** | k = 5 (10-fold CV) | Non-parametric, robust to non-Gaussian features |\n| **Random Forest** | 25 trees, entropy split, depth ≤ 8 | Handles non-linear boundaries; decorrelates trees for stability |\n| **AdaBoost** | 25 estimators, learning-rate 0.8 | Combines shallow trees; useful for heterogeneous margins |\n\nHyper-parameters were tuned with grid-search and stratified 80/20 train-test splits. All numeric predictors were z-standardised; categoricals were dummy-coded.\n\n## Results\n\n| Metric | KNN | Random Forest | AdaBoost |\n|--------|-----|---------------|----------|\n| **Overall test accuracy** | 95 % | **97.2 %** | 91.9 % |\n| Rock accuracy | 99 % | **99 %** | 96 % |\n| Instrumental accuracy | 96 % | **95 %** | 89 % |\n| Hip Hop accuracy | 55 % | **52 %** | 47 % |\n\n> Random Forest yields the highest macro accuracy, but all models struggle on the minority Hip Hop class, reflecting the imbalance noted earlier.\n\n### Feature importance (Random Forest)\n\n`duration_ms` dominates (> 30 % of total importance), followed by *energy*, *acousticness*, *danceability* and *speechiness* – intuitive given that Instrumental tracks are typically shorter, quieter and more acoustic than Rock or Hip Hop.\n\n## Discussion & Future Work\n\n* **Class imbalance** depresses Hip Hop recall; bootstrap or SMOTE resampling could redress this.  \n* **Model simplicity vs. performance** – KNN rivals Random Forest despite zero training, underscoring that a well-scaled feature space often suffices.  \n* **Over-fitting guardrails** – Adding PCA components as engineered features or pruning correlated variables could further stabilise ensembles.  \n* **Granular genres** – Extending the pipeline to the remaining eight genres will test scalability and reveal whether similarity in audio space (e.g., Rock vs. Metal) erodes accuracy.\n\n---\n\n","srcMarkdownNoYaml":"\n\n## Motivation\n\nStreaming platforms publish tens of thousands of tracks daily, blurring genre boundaries and stretching human taggers thin. An automatic classifier that reliably separates **Rock, Instrumental and Hip Hop** can cut curation time and power downstream recommendation engines.:contentReference[oaicite:0]{index=0}\n\n## Data\n\n* **Source** – Kaggle “Music Genre Classification” (Machine Hack Hackathon).  \n* **Observations** – 17999 tracks, already split 80 / 20 into train/test.  \n* **Predictors** – 16 audio-level features (e.g., *danceability*, *energy*, *loudness*, *tempo*, *duration_ms*) plus artist & track names.  \n* **Target** – 11 original genres (0–10). We subset to classes 10 (Rock), 7 (Instrumental) and 5 (Hip Hop) for their distinct audio signatures and sample sizes (3374, 517 and 464 tracks respectively).\n\nAfter dropping rows with missing *instrumentalness*, *key* or *popularity*, the working dataset contains **4355** observations.\n\n### Exploratory analysis (EDA)\n\n* Distributions vary widely: *energy* and *loudness* are left-skewed; *acousticness* and *instrumentalness* are heavily right-skewed.  \n* Rock dominates the sample (≈ 78 %), producing a **class-imbalance risk**.  \n* Correlation heat-map highlights a strong positive link between *energy* and *loudness* and a negative link between each and *acousticness*. \n* PCA confirms Instrumental music is separated mostly along PC1 (low energy, high acousticness), whereas Rock and Hip Hop overlap along intensity but differ along danceability/valence (PC2).\n\n## Methods\n\n| Model | Key settings | Rationale |\n|-------|--------------|-----------|\n| **K-Nearest Neighbours** | k = 5 (10-fold CV) | Non-parametric, robust to non-Gaussian features |\n| **Random Forest** | 25 trees, entropy split, depth ≤ 8 | Handles non-linear boundaries; decorrelates trees for stability |\n| **AdaBoost** | 25 estimators, learning-rate 0.8 | Combines shallow trees; useful for heterogeneous margins |\n\nHyper-parameters were tuned with grid-search and stratified 80/20 train-test splits. All numeric predictors were z-standardised; categoricals were dummy-coded.\n\n## Results\n\n| Metric | KNN | Random Forest | AdaBoost |\n|--------|-----|---------------|----------|\n| **Overall test accuracy** | 95 % | **97.2 %** | 91.9 % |\n| Rock accuracy | 99 % | **99 %** | 96 % |\n| Instrumental accuracy | 96 % | **95 %** | 89 % |\n| Hip Hop accuracy | 55 % | **52 %** | 47 % |\n\n> Random Forest yields the highest macro accuracy, but all models struggle on the minority Hip Hop class, reflecting the imbalance noted earlier.\n\n### Feature importance (Random Forest)\n\n`duration_ms` dominates (> 30 % of total importance), followed by *energy*, *acousticness*, *danceability* and *speechiness* – intuitive given that Instrumental tracks are typically shorter, quieter and more acoustic than Rock or Hip Hop.\n\n## Discussion & Future Work\n\n* **Class imbalance** depresses Hip Hop recall; bootstrap or SMOTE resampling could redress this.  \n* **Model simplicity vs. performance** – KNN rivals Random Forest despite zero training, underscoring that a well-scaled feature space often suffices.  \n* **Over-fitting guardrails** – Adding PCA components as engineered features or pruning correlated variables could further stabilise ensembles.  \n* **Granular genres** – Extending the pipeline to the remaining eight genres will test scalability and reveal whether similarity in audio space (e.g., Rock vs. Metal) erodes accuracy.\n\n---\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"highlight-style":"github","number-sections":true,"output-file":"music.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":"cosmo","title":"Music Genre Classification via Machine Learning","description":"Rock, Instrumental & Hip Hop prediction with KNN, Random Forest and AdaBoost","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}